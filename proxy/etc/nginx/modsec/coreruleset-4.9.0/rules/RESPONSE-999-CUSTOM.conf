# ------------------------------------------------------------------
# Exemplo de regras custom para detectar brute force baseado em
# HTTP 401 retornado pela sua aplicação de login.
# ------------------------------------------------------------------

# 1) Se a resposta for 401 (Login Inválido), incrementamos o contador de falhas para esse IP
SecRule RESPONSE_STATUS "@streq 401" \
    "id:999021,\
     phase:4,\
     pass,\
     t:none,\
     nolog,\
     setvar:ip.login_falhas=+1,\
     msg:'[Custom] Falha de login detectada (401) => +1 login_falhas'"

# 2) Se o IP alcançar 5 falhas, marca ip.invasor=1
SecRule IP:login_falhas "@ge 5" \
    "id:999022,\
     phase:2,\
     pass,\
     t:none,\
     setvar:ip.invasor=1,\
     msg:'[Custom] IP marcado como invasor por 5 falhas de login'"

# 3) Se ip.invasor=1, nega o acesso (403). 
#    O Nginx intercepta 403 e pode mandar o atacante para o honeypot
SecRule IP:invasor "@eq 1" \
    "id:999023,\
     phase:2,\
     deny,\
     status:403,\
     t:none,\
     msg:'[Custom] IP invasor => 403 => honeypot'"

# Observação: Se você também quer adicionar lógica pro "Anomaly Score Exceeded",
# pode usar, por exemplo:
#   SecRuleUpdateActionById 949110 "setvar:ip.invasor=1"
# para IPs que disparem as regras do CRS.
